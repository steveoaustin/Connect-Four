{"version":3,"sources":["resources/computer.png","resources/human.png","interfaces.ts","constants.ts","board.tsx","intelligence.ts","heading.tsx","colorChoices.tsx","controls.tsx","App.tsx","serviceWorker.ts","defaultProps.ts","index.tsx"],"names":["module","exports","__webpack_require__","p","label","gameWidth","gameHeight","winSequence","sectionSize","pieceSize","margin","colorChoices","d3","require","Board","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","overlayPiece","event","winner","column","getColumn","select","attr","turn","player1","color","player2","transition","duration","ease","easeElastic","placePiece","player","row","y","board","nobody","append","newBoard","easeBounce","onBoardChange","winnerCoordinates","currentSequence","i","x1","y1","x2","y2","checkWin","onWin","showWinner","boardPosition","document","getElementById","getBoundingClientRect","position","clientX","left","clientY","top","bind","assertThisInitialized","coordinates","getPieceXCoordinates","getPieceYCoordinates","easeExp","arrayCoordinate","_this2","currentRow","currentColumn","forEach","section","selectAll","x","drawBoard","react_default","a","createElement","id","onPointerMove","onMouseOver","onClick","width","height","Component","computer","human","Heading","currentPlayer","playerNum","image","text","turnData","getImageAndPlayer","fontSize","ColorChoices","onPlayerChange","manageColors","value","myColor","opponent","opponentColor","myColorOptions","filter","opponentColorOptions","objectSpread","colorOptions","me","dist_default","options","onChange","e","placeholder","Controls","target","name","onPlayerTypeChange","ToggleButtonGroup","bsStyle","type","defaultValue","ToggleButton","colorChoices_ColorChoices","assign","playerControls","App","state","setState","heading_Heading","board_Board","controls_Controls","Boolean","window","location","hostname","match","defaultProps","ReactDOM","render","src_App","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.789e3547.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/computer.724e3bc3.png\";","module.exports = __webpack_public_path__ + \"static/media/human.e23fb818.png\";","export interface player {\r\n  computer: boolean;\r\n  color: string;\r\n  colorOptions: string[];\r\n  label: label;\r\n  searchOptions?: searchOptions;\r\n}\r\n\r\nexport interface searchOptions {\r\n  depth: number;\r\n  evaluationFunction: (board: label[][]) => number;\r\n}\r\n\r\nexport enum label {\r\n  nobody = \"nobody\",\r\n  player1 = \"Player1\",\r\n  player2 = \"Player2\"\r\n}\r\n\r\nexport interface props {\r\n  board: label[][];\r\n  player1: player;\r\n  player2: player;\r\n  turn: number;\r\n  winner: player | false;\r\n}\r\n\r\nexport interface controlProps extends props {\r\n  onPlayerChange: (player1: player, player2: player) => void;\r\n}\r\n\r\nexport interface colorControlProps extends controlProps {\r\n  player: player;\r\n}\r\n\r\nexport interface boardProps extends props {\r\n  onBoardChange: (board: label[][], turn: number) => void;\r\n  onWin: (winner: player) => void;\r\n}\r\n","import { searchOptions } from \"./interfaces\";\r\nimport {\r\n  simpleEvaluationFunction,\r\n  complexEvaluationFunction\r\n} from \"./intelligence\";\r\n\r\nexport const gameWidth = 7;\r\nexport const gameHeight = 6;\r\nexport const winSequence = 4;\r\nexport const topInterfaceHeight = 1;\r\nexport const sectionSize = 70;\r\nexport const sectionSpacing = 7;\r\nexport const pieceSize = sectionSize - sectionSpacing;\r\nexport const margin = 5;\r\n\r\nexport const backgroundColor = \"white\";\r\nexport const colorChoices = [\r\n  \"red\",\r\n  \"orange\",\r\n  \"green\",\r\n  \"blue\",\r\n  \"aqua\",\r\n  \"purple\",\r\n  \"deepPink\",\r\n  \"black\"\r\n];\r\n\r\nexport const easy: searchOptions = {\r\n  depth: 1,\r\n  evaluationFunction: simpleEvaluationFunction\r\n};\r\nexport const medium: searchOptions = {\r\n  depth: 3,\r\n  evaluationFunction: simpleEvaluationFunction\r\n};\r\nexport const hard: searchOptions = {\r\n  depth: 5,\r\n  evaluationFunction: complexEvaluationFunction\r\n};\r\n","import React, { Component } from \"react\";\r\nimport { boardProps, label, player } from \"./interfaces\";\r\nimport {\r\n  gameWidth,\r\n  gameHeight,\r\n  topInterfaceHeight,\r\n  pieceSize,\r\n  sectionSize,\r\n  sectionSpacing,\r\n  margin,\r\n  backgroundColor,\r\n  winSequence\r\n} from \"./constants\";\r\nimport { checkWin } from \"./intelligence\";\r\nimport { line } from \"d3\";\r\nconst d3 = require(\"d3\");\r\n\r\nexport default class Board extends Component<boardProps> {\r\n  constructor(props: boardProps) {\r\n    super(props);\r\n    this.onBoardChange = this.onBoardChange.bind(this);\r\n    this.onWin = this.onWin.bind(this);\r\n  }\r\n\r\n  onBoardChange(board: label[][], turn: number) {\r\n    this.props.onBoardChange(board, turn);\r\n  }\r\n\r\n  onWin(winner: player) {\r\n    this.props.onWin(winner);\r\n  }\r\n\r\n  overlayPiece = (event: React.MouseEvent) => {\r\n    if (this.props.winner) {\r\n      return; // no overlays after win\r\n    }\r\n    const column = this.getColumn(event);\r\n    if (column >= gameWidth) {\r\n      return; // avoid rendering outside of the board\r\n    }\r\n\r\n    d3.select(\"#inputOverlay\")\r\n      .attr(\r\n        \"fill\",\r\n        this.props.turn % 2 === 1\r\n          ? this.props.player1.color\r\n          : this.props.player2.color\r\n      )\r\n      .transition()\r\n      .duration(150)\r\n      .ease(d3.easeElastic)\r\n      .attr(\"cx\", column * sectionSize + sectionSize / 2 + margin)\r\n      .attr(\"cy\", sectionSize / 2)\r\n      .attr(\"r\", pieceSize / 2);\r\n  };\r\n\r\n  placePiece = (event: React.MouseEvent) => {\r\n    if (this.props.winner) {\r\n      return; // can't place pieces after win\r\n    }\r\n    const column = this.getColumn(event);\r\n    if (column >= gameWidth) {\r\n      return; // avoid rendering outside of the board\r\n    }\r\n\r\n    const player =\r\n      this.props.turn % 2 === 1 ? this.props.player1 : this.props.player2;\r\n\r\n    let row = gameHeight - 1;\r\n    for (let y = 0; y < gameHeight; y++) {\r\n      if (this.props.board[y][column] != label.nobody) {\r\n        row--;\r\n      }\r\n    }\r\n\r\n    if (row < 0) {\r\n      return; // row is full\r\n    }\r\n\r\n    d3.select(\"#Board\")\r\n      .append(\"circle\")\r\n      .attr(\"id\", \"piece\" + this.props.turn)\r\n      .attr(\"class\", player.label)\r\n      .attr(\"fill\", player.color)\r\n      .attr(\"cx\", column * sectionSize + sectionSize / 2 + margin)\r\n      .attr(\"cy\", sectionSize / 2)\r\n      .attr(\"r\", pieceSize / 2);\r\n\r\n    let newBoard = this.props.board;\r\n    newBoard[row][column] = player.label;\r\n\r\n    d3.select(\"#piece\" + this.props.turn)\r\n      .transition()\r\n      .duration(150 + 100 * row)\r\n      .ease(d3.easeBounce)\r\n      .attr(\"cx\", column * sectionSize + sectionSize / 2 + margin)\r\n      .attr(\"cy\", row * sectionSize + sectionSize / 2 + sectionSize + margin)\r\n      .attr(\"r\", pieceSize / 2);\r\n\r\n    this.onBoardChange(newBoard, this.props.turn + 1);\r\n\r\n    const winnerCoordinates = checkWin(player.label, newBoard);\r\n\r\n    if (winnerCoordinates) {\r\n      this.onWin(player);\r\n      this.showWinner(winnerCoordinates, player);\r\n    } else {\r\n      // swap the color of input overlay to cause \"instant\" transition\r\n      d3.select(\"#inputOverlay\").attr(\r\n        \"fill\",\r\n        (this.props.turn + 1) % 2 == 1\r\n          ? this.props.player1.color\r\n          : this.props.player2.color\r\n      );\r\n    }\r\n  };\r\n\r\n  showWinner(\r\n    coordinates: { x1: number; y1: number; x2: number; y2: number },\r\n    player: player\r\n  ) {\r\n    // hide overlay piece when the game is over\r\n    d3.select(\"#inputOverlay\").attr(\"fill\", backgroundColor);\r\n\r\n    d3.select(\"#Board\")\r\n      .append(\"line\")\r\n      .attr(\"id\", \"winLineOuter\")\r\n      .attr(\"stroke-width\", \"8\")\r\n      .attr(\"stroke-linecap\", \"round\")\r\n      .attr(\"stroke\", \"black\")\r\n      .attr(\"x1\", this.getPieceXCoordinates(coordinates.x1))\r\n      .attr(\"y1\", this.getPieceYCoordinates(coordinates.y1))\r\n      .attr(\"x2\", this.getPieceXCoordinates(coordinates.x1))\r\n      .attr(\"y2\", this.getPieceYCoordinates(coordinates.y1));\r\n\r\n    d3.select(\"#Board\")\r\n      .append(\"line\")\r\n      .attr(\"id\", \"winLineInner\")\r\n      .attr(\"stroke-width\", \"5\")\r\n      .attr(\"stroke-linecap\", \"round\")\r\n      .attr(\"stroke\", \"white\")\r\n      .attr(\"x1\", this.getPieceXCoordinates(coordinates.x1))\r\n      .attr(\"y1\", this.getPieceYCoordinates(coordinates.y1))\r\n      .attr(\"x2\", this.getPieceXCoordinates(coordinates.x1))\r\n      .attr(\"y2\", this.getPieceYCoordinates(coordinates.y1));\r\n\r\n    d3.select(\"#winLineOuter\")\r\n      .transition()\r\n      .ease(d3.easeExp)\r\n      .duration(200 * winSequence)\r\n      .attr(\"x2\", this.getPieceXCoordinates(coordinates.x2))\r\n      .attr(\"y2\", this.getPieceYCoordinates(coordinates.y2));\r\n\r\n    d3.select(\"#winLineInner\")\r\n      .transition()\r\n      .ease(d3.easeExp)\r\n      .duration(200 * winSequence)\r\n      .attr(\"x2\", this.getPieceXCoordinates(coordinates.x2))\r\n      .attr(\"y2\", this.getPieceYCoordinates(coordinates.y2));\r\n  }\r\n\r\n  getPieceXCoordinates(arrayCoordinate: number) {\r\n    return arrayCoordinate * sectionSize + sectionSize / 2 + margin;\r\n  }\r\n  getPieceYCoordinates(arrayCoordinate: number) {\r\n    return (\r\n      arrayCoordinate * sectionSize + sectionSize + sectionSize / 2 + margin\r\n    );\r\n  }\r\n\r\n  getColumn = (event: React.MouseEvent) => {\r\n    const boardPosition = document!\r\n      .getElementById(\"Board\")!\r\n      .getBoundingClientRect();\r\n\r\n    const position: { x: number; y: number } = {\r\n      x: event.clientX - boardPosition.left,\r\n      y: event.clientY - boardPosition.top\r\n    };\r\n\r\n    return (\r\n      (position.x - margin - ((position.x - margin) % sectionSize)) /\r\n      sectionSize\r\n    );\r\n  };\r\n\r\n  drawBoard() {\r\n    let currentRow: number = 0;\r\n    let currentColumn: number = 0;\r\n    const board = this.props.board;\r\n    board.forEach(row => {\r\n      row.forEach(section => {\r\n        d3.select(\"#Board\")\r\n          .append(\"circle\")\r\n          .attr(\"cx\", this.getPieceXCoordinates(currentColumn))\r\n          .attr(\"cy\", this.getPieceYCoordinates(currentRow))\r\n          .attr(\"r\", pieceSize / 2)\r\n          .attr(\"fill\", backgroundColor);\r\n\r\n        currentColumn++;\r\n      });\r\n      currentColumn = 0;\r\n      currentRow++;\r\n    });\r\n  }\r\n\r\n  componentDidUpdate() {\r\n    d3.selectAll(\".\" + this.props.player1.label).attr(\r\n      \"fill\",\r\n      this.props.player1.color\r\n    );\r\n    d3.selectAll(\".\" + this.props.player2.label).attr(\r\n      \"fill\",\r\n      this.props.player2.color\r\n    );\r\n\r\n    // hide input overlay after somebody wins\r\n    if (this.props.winner) return;\r\n    d3.select(\"#inputOverlay\").attr(\r\n      \"fill\",\r\n      this.props.turn % 2 === 1\r\n        ? this.props.player1.color\r\n        : this.props.player2.color\r\n    );\r\n  }\r\n\r\n  componentDidMount() {\r\n    d3.select(\"#Board\")\r\n      .append(\"rect\")\r\n      .attr(\"x\", 0)\r\n      .attr(\"y\", sectionSize * topInterfaceHeight)\r\n      .attr(\"width\", sectionSize * gameWidth + margin * 2)\r\n      .attr(\"height\", sectionSize * gameHeight + margin * 2)\r\n      .attr(\"fill\", \"yellow\");\r\n\r\n    // draw lines indicating input areas\r\n    for (let x = 0; x <= gameWidth; x++) {\r\n      d3.select(\"#Board\")\r\n        .append(\"line\")\r\n        .attr(\"x1\", x * sectionSize + margin)\r\n        .attr(\"x2\", x * sectionSize + margin)\r\n        .attr(\"y1\", sectionSpacing)\r\n        .attr(\"y2\", topInterfaceHeight * sectionSize - sectionSpacing)\r\n        .attr(\"stroke-width\", \"2\")\r\n        .attr(\"stroke-linecap\", \"round\")\r\n        .attr(\"stroke\", \"SteelBlue\");\r\n    }\r\n\r\n    this.drawBoard();\r\n\r\n    // add placeholder circle for input overlay\r\n    d3.select(\"#Board\")\r\n      .append(\"circle\")\r\n      .attr(\"id\", \"inputOverlay\")\r\n      .attr(\"cx\", sectionSize / 2 + margin)\r\n      .attr(\"cy\", sectionSize / 2)\r\n      .attr(\"r\", pieceSize / 2)\r\n      .attr(\"fill\", backgroundColor);\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div id=\"boardContainer\">\r\n        <svg\r\n          id=\"Board\"\r\n          onPointerMove={this.overlayPiece}\r\n          onMouseOver={this.overlayPiece}\r\n          onClick={this.placePiece}\r\n          width={sectionSize * gameWidth + margin * 2}\r\n          height={sectionSize * (gameHeight + topInterfaceHeight) + margin * 2}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import { searchOptions, label, player } from \"./interfaces\";\r\nimport { gameHeight, gameWidth, winSequence } from \"./constants\";\r\n\r\nexport default class intellignece {}\r\n\r\nexport function simpleEvaluationFunction(board: label[][]) {\r\n  return 0;\r\n}\r\n\r\nexport function complexEvaluationFunction(board: label[][]) {\r\n  return 0;\r\n}\r\n\r\nexport function checkWin(label: label, board: label[][]) {\r\n  let currentSequence = 0;\r\n  // horizontal\r\n  for (let row = 0; row < gameHeight; row++) {\r\n    for (let column = 0; column <= gameWidth - winSequence; column++) {\r\n      for (let i = 0; i < winSequence; i++) {\r\n        if (board[row][column + i] === label) {\r\n          currentSequence++;\r\n        }\r\n      }\r\n      if (currentSequence === winSequence) {\r\n        return { x1: column, y1: row, x2: column + winSequence - 1, y2: row };\r\n      }\r\n      currentSequence = 0;\r\n    }\r\n  }\r\n\r\n  // vertical\r\n  for (let row = 0; row <= gameHeight - winSequence; row++) {\r\n    for (let column = 0; column < gameWidth; column++) {\r\n      for (let i = 0; i < winSequence; i++) {\r\n        if (board[row + i][column] === label) {\r\n          currentSequence++;\r\n        }\r\n      }\r\n      if (currentSequence === winSequence) {\r\n        return { x1: column, y1: row, x2: column, y2: row + winSequence - 1 };\r\n      }\r\n      currentSequence = 0;\r\n    }\r\n  }\r\n\r\n  // diagonal 'down'\r\n  for (let row = 0; row <= gameHeight - winSequence; row++) {\r\n    for (let column = 0; column <= gameWidth - winSequence; column++) {\r\n      for (let i = 0; i < winSequence; i++) {\r\n        if (board[row + i][column + i] === label) {\r\n          currentSequence++;\r\n        }\r\n      }\r\n      if (currentSequence === winSequence) {\r\n        return {\r\n          x1: column,\r\n          y1: row,\r\n          x2: column + winSequence - 1,\r\n          y2: row + winSequence - 1\r\n        };\r\n      }\r\n      currentSequence = 0;\r\n    }\r\n  }\r\n\r\n  // diagonal 'up'\r\n  for (let row = gameHeight - 1; row >= winSequence; row--) {\r\n    for (let column = 0; column <= gameWidth - winSequence; column++) {\r\n      for (let i = 0; i < winSequence; i++) {\r\n        if (board[row - i][column + i] === label) {\r\n          currentSequence++;\r\n        }\r\n      }\r\n      if (currentSequence === winSequence) {\r\n        return {\r\n          x1: column,\r\n          y1: row,\r\n          x2: column + winSequence - 1,\r\n          y2: row - winSequence + 1\r\n        };\r\n      }\r\n      currentSequence = 0;\r\n    }\r\n  }\r\n  return false;\r\n}\r\n","import React, { Component } from \"react\";\r\nimport { props, player, label } from \"./interfaces\";\r\nimport { gameWidth, sectionSize } from \"./constants\";\r\nvar d3 = require(\"d3\");\r\nconst computer = require(\"./resources/computer.png\");\r\nconst human = require(\"./resources/human.png\");\r\nconst fontSize = 30;\r\nconst imageOffset = 110;\r\n\r\nexport default class Heading extends Component<props> {\r\n  constructor(props: props) {\r\n    super(props);\r\n  }\r\n\r\n  getImageAndPlayer() {\r\n    let playerNum = this.props.turn % 2;\r\n    let currentPlayer: player;\r\n    switch (playerNum) {\r\n      case 1:\r\n        currentPlayer = this.props.player1;\r\n        break;\r\n      default:\r\n        currentPlayer = this.props.player2;\r\n        playerNum = 2; // display 2 instead of 0\r\n    }\r\n\r\n    const image = currentPlayer.computer ? computer : human;\r\n\r\n    return { currentPlayer: currentPlayer, playerNum: playerNum, image: image };\r\n  }\r\n\r\n  componentDidUpdate() {\r\n    if (this.props.winner) {\r\n      const image = this.props.winner.computer ? computer : human;\r\n\r\n      d3.select(\"#headingText\")\r\n        .attr(\"fill\", this.props.winner.color)\r\n        .text(this.props.winner.label + \" Wins!\");\r\n\r\n      d3.select(\"#leftImage\").attr(\"xlink:href\", image);\r\n      d3.select(\"#rightImage\").attr(\"xlink:href\", image);\r\n    } else {\r\n      const turnData = this.getImageAndPlayer();\r\n\r\n      d3.select(\"#headingText\")\r\n        .attr(\"fill\", turnData.currentPlayer.color)\r\n        .text(\"Player \" + turnData.playerNum + \"'s turn\");\r\n\r\n      d3.select(\"#leftImage\").attr(\"xlink:href\", turnData.image);\r\n      d3.select(\"#rightImage\").attr(\"xlink:href\", turnData.image);\r\n    }\r\n  }\r\n\r\n  componentDidMount() {\r\n    const turnData = this.getImageAndPlayer();\r\n\r\n    d3.select(\"#Heading\")\r\n      .append(\"text\")\r\n      .attr(\"id\", \"headingText\")\r\n      .attr(\"x\", (sectionSize * gameWidth) / 2)\r\n      .attr(\"y\", sectionSize / 2)\r\n      .attr(\"font-family\", \"sans-serif\")\r\n      .attr(\"font-size\", \"30px\")\r\n      .attr(\"text-anchor\", \"middle\")\r\n      .attr(\"alignment-baseline\", \"middle\")\r\n      .attr(\"fill\", turnData.currentPlayer.color)\r\n      .text(\"Player \" + turnData.playerNum + \"'s turn\");\r\n\r\n    d3.select(\"#Heading\")\r\n      .append(\"svg:image\")\r\n      .attr(\"id\", \"leftImage\")\r\n      .attr(\"xlink:href\", turnData.image)\r\n      .attr(\"x\", imageOffset)\r\n      .attr(\"y\", sectionSize / 2 - fontSize / 2)\r\n      .attr(\"width\", fontSize)\r\n      .attr(\"height\", fontSize);\r\n\r\n    d3.select(\"#Heading\")\r\n      .append(\"svg:image\")\r\n      .attr(\"id\", \"rightImage\")\r\n      .attr(\"xlink:href\", turnData.image)\r\n      .attr(\"x\", sectionSize * gameWidth - fontSize - imageOffset)\r\n      .attr(\"y\", sectionSize / 2 - fontSize / 2)\r\n      .attr(\"width\", fontSize)\r\n      .attr(\"height\", fontSize);\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div id=\"headingContainer\">\r\n        <svg\r\n          id=\"Heading\"\r\n          width={sectionSize * gameWidth}\r\n          height={sectionSize}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React, { Component, FormEvent } from \"react\";\r\nimport Dropdown from \"react-dropdown\";\r\nimport \"react-dropdown/style.css\";\r\nimport { colorChoices } from \"./constants\";\r\nimport { colorControlProps, player, label } from \"./interfaces\";\r\n\r\nexport default class ColorChoices extends Component<colorControlProps> {\r\n  constructor(props: colorControlProps) {\r\n    super(props);\r\n    this.onPlayerChange = this.onPlayerChange.bind(this);\r\n    this.manageColors({ value: this.props.player.color });\r\n  }\r\n\r\n  onPlayerChange(player1: player, player2: player) {\r\n    this.props.onPlayerChange(player1, player2);\r\n  }\r\n\r\n  manageColors(event: any) {\r\n    const myColor = event.value;\r\n    let opponent =\r\n      this.props.player === this.props.player1\r\n        ? this.props.player2\r\n        : this.props.player1;\r\n    const opponentColor = opponent.color;\r\n\r\n    const myColorOptions = colorChoices.filter(color => color != opponentColor);\r\n    const opponentColorOptions = colorChoices.filter(color => color != myColor);\r\n\r\n    opponent = {\r\n      ...opponent,\r\n      color: opponentColor,\r\n      colorOptions: opponentColorOptions\r\n    };\r\n\r\n    let me = {\r\n      ...this.props.player,\r\n      color: myColor,\r\n      colorOptions: myColorOptions\r\n    };\r\n\r\n    me.label == label.player1\r\n      ? this.onPlayerChange(me, opponent)\r\n      : this.onPlayerChange(opponent, me);\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <Dropdown\r\n        options={this.props.player.colorOptions}\r\n        onChange={e => this.manageColors(e)}\r\n        value={this.props.player.color}\r\n        placeholder=\"Choose a color\"\r\n      />\r\n    );\r\n  }\r\n}\r\n","import React, { Component, FormEvent } from \"react\";\r\nimport {\r\n  ToggleButton,\r\n  ToggleButtonGroup,\r\n  ButtonToolbar,\r\n  DropdownButton\r\n} from \"react-bootstrap\";\r\nimport Dropdown from \"react-dropdown\";\r\nimport \"react-dropdown/style.css\";\r\nimport { controlProps, props, player, label } from \"./interfaces\";\r\nimport { colorChoices } from \"./constants\";\r\nimport ColorChoices from \"./colorChoices\";\r\n\r\nconst controls1 = \"p1Controls\";\r\nconst controls2 = \"p2Controls\";\r\nconst type = \"t\";\r\nconst color = \"c\";\r\nconst search = \"s\";\r\n\r\nexport default class Controls extends Component<controlProps> {\r\n  constructor(props: controlProps) {\r\n    super(props);\r\n    this.onPlayerChange = this.onPlayerChange.bind(this);\r\n  }\r\n\r\n  onPlayerChange(player1: player, player2: player) {\r\n    this.props.onPlayerChange(player1, player2);\r\n  }\r\n\r\n  onPlayerTypeChange(event: any, player: player) {\r\n    const target = event.target;\r\n    const control = target.name;\r\n    player.computer = target.value === \"computer\";\r\n\r\n    player.label == label.player1\r\n      ? this.onPlayerChange(player, this.props.player2)\r\n      : this.onPlayerChange(this.props.player1, player);\r\n  }\r\n\r\n  playerControls(player: player) {\r\n    return (\r\n      <div id={player.label}>\r\n        <form onChange={() => this.onPlayerTypeChange(event, player)}>\r\n          <ToggleButtonGroup\r\n            bsStyle=\"primary\"\r\n            type=\"radio\"\r\n            name={player.label + type}\r\n            defaultValue={player.computer ? \"computer\" : \"human\"}\r\n          >\r\n            <ToggleButton value={\"human\"}>Human</ToggleButton>\r\n            <ToggleButton value={\"computer\"}>Computer</ToggleButton>\r\n          </ToggleButtonGroup>\r\n          <ColorChoices {...this.props} player={player} />\r\n        </form>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div id=\"controlContainer\">\r\n        {this.playerControls(this.props.player1)}\r\n        {this.playerControls(this.props.player2)}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React, { Component } from \"react\";\nimport Board from \"./board\";\nimport Heading from \"./heading\";\nimport \"./index.css\";\nimport { props, player, label } from \"./interfaces\";\nimport { render } from \"react-dom\";\nimport Controls from \"./controls\";\n\nclass App extends Component<props> {\n  state: props;\n\n  constructor(props: props) {\n    super(props);\n    this.state = { ...props };\n    this.onPlayerChange = this.onPlayerChange.bind(this);\n    this.onBoardChange = this.onBoardChange.bind(this);\n    this.onWin = this.onWin.bind(this);\n  }\n\n  onPlayerChange(player1: player, player2: player) {\n    this.setState({ player1: player1, player2: player2 });\n  }\n\n  onBoardChange(board: label[][], turn: number) {\n    this.setState({ board: board, turn: turn });\n  }\n\n  onWin(winner: player) {\n    this.setState({ winner: winner });\n  }\n\n  render() {\n    return (\n      <div id=\"App\">\n        <Heading {...this.state} />\n        <Board\n          {...this.state}\n          onBoardChange={this.onBoardChange}\n          onWin={this.onWin}\n        />\n        <Controls {...this.state} onPlayerChange={this.onPlayerChange} />\n        <div id=\"Vizualization\" />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { label, player, props } from \"./interfaces\";\r\nimport { colorChoices } from \"./constants\";\r\n\r\nconst board: label[][] = [\r\n  [\r\n    label.nobody,\r\n    label.nobody,\r\n    label.nobody,\r\n    label.nobody,\r\n    label.nobody,\r\n    label.nobody,\r\n    label.nobody\r\n  ],\r\n  [\r\n    label.nobody,\r\n    label.nobody,\r\n    label.nobody,\r\n    label.nobody,\r\n    label.nobody,\r\n    label.nobody,\r\n    label.nobody\r\n  ],\r\n  [\r\n    label.nobody,\r\n    label.nobody,\r\n    label.nobody,\r\n    label.nobody,\r\n    label.nobody,\r\n    label.nobody,\r\n    label.nobody\r\n  ],\r\n  [\r\n    label.nobody,\r\n    label.nobody,\r\n    label.nobody,\r\n    label.nobody,\r\n    label.nobody,\r\n    label.nobody,\r\n    label.nobody\r\n  ],\r\n  [\r\n    label.nobody,\r\n    label.nobody,\r\n    label.nobody,\r\n    label.nobody,\r\n    label.nobody,\r\n    label.nobody,\r\n    label.nobody\r\n  ],\r\n  [\r\n    label.nobody,\r\n    label.nobody,\r\n    label.nobody,\r\n    label.nobody,\r\n    label.nobody,\r\n    label.nobody,\r\n    label.nobody\r\n  ]\r\n];\r\n\r\nexport const defaultProps: props = {\r\n  board: board,\r\n  player1: {\r\n    computer: false,\r\n    label: label.player1,\r\n    color: \"red\",\r\n    colorOptions: colorChoices\r\n  },\r\n  player2: {\r\n    computer: false,\r\n    label: label.player2,\r\n    color: \"black\",\r\n    colorOptions: colorChoices\r\n  },\r\n  turn: 1,\r\n  winner: false\r\n};\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { defaultProps } from \"./defaultProps\";\n\nReactDOM.render(<App {...defaultProps} />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}