{"version":3,"sources":["interfaces.ts","intelligence.ts","constants.ts","board.tsx","heading.tsx","colorChoices.tsx","computerOptions.tsx","controls.tsx","defaultProps.ts","App.tsx","serviceWorker.ts","index.tsx","resources/computer.png","resources/human.png"],"names":["label","minV","board","me","opponent","depth","alpha","beta","terminalState","searchOptions","evaluationFunction","value","Number","MAX_SAFE_INTEGER","moves","possibleMoves","move","maxValue","maxV","applyMove","copyBoard","Math","min","MIN_SAFE_INTEGER","minValue","max","checkWin","player1","player2","fullColumns","c","gameWidth","nobody","result","push","column","player","row","gameHeight","r","console","error","Error","newBoard","simpleEvaluationFunction","complexEvaluationFunction","currentSequence","winSequence","i","x1","y1","x2","y2","sectionSize","pieceSize","margin","backgroundColor","colorChoices","depthOptions","evalFunctionOptions","evalFunctionDict","simple","complex","d3","require","Board","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","overlayPiece","event","winner","getColumn","turn","computer","select","attr","color","transition","duration","ease","easeElastic","clickToPlacePiece","placePiece","boardPosition","document","getElementById","getBoundingClientRect","position","clientX","left","clientY","top","onBoardChange","bind","assertThisInitialized","onWin","_this2","y","append","easeBounce","on","piecePlaced","winnerCoordinates","showWinner","coordinates","getPieceXCoordinates","getPieceYCoordinates","easeExp","arrayCoordinate","_this3","currentRow","currentColumn","forEach","section","selectAll","remove","started","resetBoard","computerMove","bestMove","bestMoveValue","options","getMove","x","drawBoard","react_default","a","createElement","id","onPointerMove","onMouseOver","onClick","width","height","Component","human","Heading","currentPlayer","playerNum","image","turnData","getImageAndPlayer","text","fontSize","ColorChoices","onPlayerChange","manageColors","myColor","opponentColor","myColorOptions","filter","opponentColorOptions","objectSpread","colorOptions","dist_default","onChange","e","placeholder","ComputerOptions","evalFunction","className","onDepthChange","toString","onEvalChange","Controls","onGameStart","onGameReset","target","name","undefined","colorChoices_ColorChoices","assign","ToggleButtonGroup","onPlayerTypeChange","bsStyle","type","defaultValue","ToggleButton","disabled","computerOptions_ComputerOptions","Button","gameControls","playerControls","generateBoard","defaultProps","App","state","setState","heading_Heading","board_Board","controls_Controls","Boolean","window","location","hostname","match","ReactDOM","render","src_App","navigator","serviceWorker","ready","then","registration","unregister","module","exports","__webpack_require__","p"],"mappings":"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","file":"static/js/main.9cb2ff65.chunk.js","sourcesContent":["export interface player {\r\n  computer: boolean;\r\n  color: string;\r\n  colorOptions: string[];\r\n  label: label;\r\n  searchOptions?: searchOptions;\r\n}\r\n\r\nexport interface searchOptions {\r\n  depth: number;\r\n  evaluationFunction: (\r\n    board: label[][],\r\n    me: player,\r\n    opponent: player\r\n  ) => number;\r\n}\r\n\r\nexport enum label {\r\n  nobody = \"nobody\",\r\n  player1 = \"Player1\",\r\n  player2 = \"Player2\"\r\n}\r\n\r\nexport interface props {\r\n  board: label[][];\r\n  player1: player;\r\n  player2: player;\r\n  turn: number;\r\n  started: boolean;\r\n  winner: player | false;\r\n}\r\n\r\nexport interface controlProps extends props {\r\n  onPlayerChange: (player1: player, player2: player) => void;\r\n  onGameStart: () => void;\r\n  onGameReset: () => void;\r\n}\r\n\r\nexport interface individualControlProps extends controlProps {\r\n  player: player;\r\n}\r\n\r\nexport interface boardProps extends props {\r\n  onBoardChange: (board: label[][], turn: number) => void;\r\n  onWin: (winner: player) => void;\r\n}\r\n","import { searchOptions, label, player } from \"./interfaces\";\r\nimport { gameHeight, gameWidth, winSequence } from \"./constants\";\r\n\r\nexport function getMove(me: player, opponent: player, board: label[][]) {\r\n  const moves: number[] = possibleMoves(board);\r\n  let bestMove: number = 0;\r\n  let bestMoveValue: number = Number.MIN_SAFE_INTEGER;\r\n  const options = me.searchOptions;\r\n  if (!options) {\r\n    throw Error(\"getting result for human player\");\r\n  }\r\n  const depth = options.depth;\r\n  for (let move in moves) {\r\n    const successor = applyMove(copyBoard(board), moves[move], me);\r\n    const value = minV(\r\n      successor,\r\n      me,\r\n      opponent,\r\n      depth,\r\n      Number.MIN_SAFE_INTEGER,\r\n      Number.MAX_SAFE_INTEGER\r\n    );\r\n    if (value > bestMoveValue) {\r\n      bestMoveValue = value;\r\n      bestMove = moves[move];\r\n    }\r\n  }\r\n  return bestMove;\r\n}\r\n\r\nfunction minV(\r\n  board: label[][],\r\n  me: player,\r\n  opponent: player,\r\n  depth: number,\r\n  alpha: number,\r\n  beta: number\r\n) {\r\n  if (terminalState(board)) {\r\n    return me.searchOptions!.evaluationFunction(board, me, opponent);\r\n  } else if (depth == 0) {\r\n    return me.searchOptions!.evaluationFunction(board, me, opponent);\r\n  }\r\n\r\n  let value: number = Number.MAX_SAFE_INTEGER;\r\n  const moves: number[] = possibleMoves(board);\r\n  for (let move in moves) {\r\n    const successor = applyMove(copyBoard(board), moves[move], opponent);\r\n    const maxValue = maxV(successor, me, opponent, depth - 1, alpha, beta);\r\n    value = Math.min(value, maxValue);\r\n    if (maxValue <= alpha) {\r\n      return maxValue;\r\n    }\r\n    beta = Math.min(beta, maxValue);\r\n  }\r\n  return value;\r\n}\r\n\r\nfunction maxV(\r\n  board: label[][],\r\n  me: player,\r\n  opponent: player,\r\n  depth: number,\r\n  alpha: number,\r\n  beta: number\r\n) {\r\n  if (terminalState(board)) {\r\n    return me.searchOptions!.evaluationFunction(board, me, opponent);\r\n  } else if (depth == 0) {\r\n    return me.searchOptions!.evaluationFunction(board, me, opponent);\r\n  }\r\n\r\n  let value: number = Number.MIN_SAFE_INTEGER;\r\n  const moves: number[] = possibleMoves(board);\r\n\r\n  for (let move in moves) {\r\n    const successor = applyMove(copyBoard(board), moves[move], me);\r\n    const minValue = minV(successor, me, opponent, depth - 1, alpha, beta);\r\n    value = Math.max(value, minValue);\r\n    if (value >= beta) {\r\n      return value;\r\n    }\r\n    alpha = Math.max(alpha, value);\r\n  }\r\n  return value;\r\n}\r\n\r\nfunction terminalState(board: label[][]) {\r\n  if (checkWin(label.player1, board) || checkWin(label.player2, board)) {\r\n    return true;\r\n  }\r\n  let fullColumns = 0;\r\n  for (let c = 0; c < gameWidth; c++) {\r\n    if (board[0][c] != label.nobody) fullColumns++;\r\n  }\r\n  if (fullColumns === gameWidth) return true;\r\n  return false;\r\n}\r\n\r\nfunction possibleMoves(board: label[][]) {\r\n  const result = [];\r\n  for (let c = 0; c < gameWidth; c++) {\r\n    if (board[0][c] === label.nobody) {\r\n      result.push(c);\r\n    }\r\n  }\r\n  return result;\r\n}\r\n\r\nfunction applyMove(board: label[][], column: number, player: player) {\r\n  let row = gameHeight - 1;\r\n  for (let r = 0; r < gameHeight; r++) {\r\n    if (board[r][column] != label.nobody) row--;\r\n  }\r\n\r\n  if (row < 0) {\r\n    console.error(row, board);\r\n    throw new Error(\"Illegal move\");\r\n  }\r\n\r\n  board[row][column] = player.label;\r\n  return board;\r\n}\r\n\r\nfunction copyBoard(board: label[][]) {\r\n  const newBoard: label[][] = [];\r\n  for (let r = 0; r < gameHeight; r++) {\r\n    newBoard[r] = [];\r\n    for (let c = 0; c < gameWidth; c++) {\r\n      newBoard[r][c] = board[r][c];\r\n    }\r\n  }\r\n  return newBoard;\r\n}\r\n\r\nexport function simpleEvaluationFunction(\r\n  board: label[][],\r\n  me: player,\r\n  opponent: player\r\n) {\r\n  if (checkWin(me.label, board)) {\r\n    return 1;\r\n  } else if (checkWin(opponent.label, board)) {\r\n    return -1;\r\n  } else {\r\n    return 0;\r\n  }\r\n}\r\n\r\nexport function complexEvaluationFunction(\r\n  board: label[][],\r\n  me: player,\r\n  opponent: player\r\n) {\r\n  return 0;\r\n}\r\n\r\nexport function checkWin(label: label, board: label[][]) {\r\n  let currentSequence = 0;\r\n  // horizontal\r\n  for (let row = 0; row < gameHeight; row++) {\r\n    for (let column = 0; column <= gameWidth - winSequence; column++) {\r\n      for (let i = 0; i < winSequence; i++) {\r\n        if (board[row][column + i] === label) {\r\n          currentSequence++;\r\n        }\r\n      }\r\n      if (currentSequence === winSequence) {\r\n        return { x1: column, y1: row, x2: column + winSequence - 1, y2: row };\r\n      }\r\n      currentSequence = 0;\r\n    }\r\n  }\r\n\r\n  // vertical\r\n  for (let row = 0; row <= gameHeight - winSequence; row++) {\r\n    for (let column = 0; column < gameWidth; column++) {\r\n      for (let i = 0; i < winSequence; i++) {\r\n        if (board[row + i][column] === label) {\r\n          currentSequence++;\r\n        }\r\n      }\r\n      if (currentSequence === winSequence) {\r\n        return { x1: column, y1: row, x2: column, y2: row + winSequence - 1 };\r\n      }\r\n      currentSequence = 0;\r\n    }\r\n  }\r\n\r\n  // diagonal 'down'\r\n  for (let row = 0; row <= gameHeight - winSequence; row++) {\r\n    for (let column = 0; column <= gameWidth - winSequence; column++) {\r\n      for (let i = 0; i < winSequence; i++) {\r\n        if (board[row + i][column + i] === label) {\r\n          currentSequence++;\r\n        }\r\n      }\r\n      if (currentSequence === winSequence) {\r\n        return {\r\n          x1: column,\r\n          y1: row,\r\n          x2: column + winSequence - 1,\r\n          y2: row + winSequence - 1\r\n        };\r\n      }\r\n      currentSequence = 0;\r\n    }\r\n  }\r\n\r\n  // diagonal 'up'\r\n  for (let row = gameHeight - 1; row >= winSequence; row--) {\r\n    for (let column = 0; column <= gameWidth - winSequence; column++) {\r\n      for (let i = 0; i < winSequence; i++) {\r\n        if (board[row - i][column + i] === label) {\r\n          currentSequence++;\r\n        }\r\n      }\r\n      if (currentSequence === winSequence) {\r\n        return {\r\n          x1: column,\r\n          y1: row,\r\n          x2: column + winSequence - 1,\r\n          y2: row - winSequence + 1\r\n        };\r\n      }\r\n      currentSequence = 0;\r\n    }\r\n  }\r\n  return false;\r\n}\r\n","import { searchOptions, label, player } from \"./interfaces\";\r\nimport {\r\n  simpleEvaluationFunction,\r\n  complexEvaluationFunction\r\n} from \"./intelligence\";\r\n\r\nexport const gameWidth = 7;\r\nexport const gameHeight = 6;\r\nexport const winSequence = 4;\r\nexport const topInterfaceHeight = 1;\r\nexport const sectionSize = 70;\r\nexport const sectionSpacing = 7;\r\nexport const pieceSize = sectionSize - sectionSpacing;\r\nexport const margin = 5;\r\n\r\nexport const backgroundColor = \"white\";\r\nexport const colorChoices = [\r\n  \"red\",\r\n  \"orange\",\r\n  \"green\",\r\n  \"blue\",\r\n  \"aqua\",\r\n  \"purple\",\r\n  \"deepPink\",\r\n  \"black\"\r\n];\r\n\r\nexport const depthOptions = [\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\"];\r\nexport const defaultDepth = \"7\";\r\n\r\nexport const evalFunctionOptions = [\"simple\", \"complex\"];\r\nexport const defaultEval = \"simple\";\r\nexport const evalFunctionDict: {\r\n  [name: string]: (board: label[][], me: player, opponent: player) => number;\r\n} = {\r\n  simple: simpleEvaluationFunction,\r\n  complex: complexEvaluationFunction\r\n};\r\n\r\nexport const easy: searchOptions = {\r\n  depth: 1,\r\n  evaluationFunction: simpleEvaluationFunction\r\n};\r\nexport const medium: searchOptions = {\r\n  depth: 3,\r\n  evaluationFunction: simpleEvaluationFunction\r\n};\r\nexport const hard: searchOptions = {\r\n  depth: 5,\r\n  evaluationFunction: complexEvaluationFunction\r\n};\r\n","import React, { Component } from \"react\";\r\nimport { boardProps, label, player } from \"./interfaces\";\r\nimport {\r\n  gameWidth,\r\n  gameHeight,\r\n  topInterfaceHeight,\r\n  pieceSize,\r\n  sectionSize,\r\n  sectionSpacing,\r\n  margin,\r\n  backgroundColor,\r\n  winSequence\r\n} from \"./constants\";\r\nimport { checkWin, getMove } from \"./intelligence\";\r\nimport { line } from \"d3\";\r\nconst d3 = require(\"d3\");\r\n\r\nexport default class Board extends Component<boardProps> {\r\n  constructor(props: boardProps) {\r\n    super(props);\r\n    this.onBoardChange = this.onBoardChange.bind(this);\r\n    this.onWin = this.onWin.bind(this);\r\n  }\r\n\r\n  onBoardChange(board: label[][], turn: number) {\r\n    this.props.onBoardChange(board, turn);\r\n  }\r\n\r\n  onWin(winner: player) {\r\n    this.props.onWin(winner);\r\n  }\r\n\r\n  overlayPiece = (event: React.MouseEvent) => {\r\n    if (this.props.winner) {\r\n      return; // no overlays after win\r\n    }\r\n    const column = this.getColumn(event);\r\n    if (column >= gameWidth) {\r\n      return; // avoid rendering outside of the board\r\n    }\r\n\r\n    const player =\r\n      this.props.turn % 2 === 1 ? this.props.player1 : this.props.player2;\r\n\r\n    if (player.computer) {\r\n      d3.select(\"#inputOverlay\").attr(\"fill\", backgroundColor);\r\n      return; // only humans overlay pieces\r\n    }\r\n\r\n    d3.select(\"#inputOverlay\")\r\n      .attr(\"fill\", player.color)\r\n      .transition()\r\n      .duration(150)\r\n      .ease(d3.easeElastic)\r\n      .attr(\"cx\", column * sectionSize + sectionSize / 2 + margin)\r\n      .attr(\"cy\", sectionSize / 2)\r\n      .attr(\"r\", pieceSize / 2);\r\n  };\r\n\r\n  placePiece(column: number, player: player) {\r\n    let row = gameHeight - 1;\r\n    for (let y = 0; y < gameHeight; y++) {\r\n      if (this.props.board[y][column] != label.nobody) {\r\n        row--;\r\n      }\r\n    }\r\n\r\n    if (row < 0) {\r\n      return; // row is full\r\n    }\r\n\r\n    d3.select(\"#Board\")\r\n      .append(\"circle\")\r\n      .attr(\"id\", \"piece\" + this.props.turn)\r\n      .attr(\"class\", player.label)\r\n      .attr(\"fill\", player.color)\r\n      .attr(\"cx\", column * sectionSize + sectionSize / 2 + margin)\r\n      .attr(\"cy\", sectionSize / 2)\r\n      .attr(\"r\", pieceSize / 2);\r\n\r\n    let newBoard = this.props.board;\r\n    newBoard[row][column] = player.label;\r\n    // hide overlay until the next turn\r\n    d3.select(\"#inputOverlay\").attr(\"fill\", backgroundColor);\r\n\r\n    d3.select(\"#piece\" + this.props.turn)\r\n      .transition()\r\n      .duration(400)\r\n      .ease(d3.easeBounce)\r\n      .attr(\"cx\", column * sectionSize + sectionSize / 2 + margin)\r\n      .attr(\"cy\", row * sectionSize + sectionSize / 2 + sectionSize + margin)\r\n      .attr(\"r\", pieceSize / 2)\r\n      .on(\"end\", () => {\r\n        this.piecePlaced(player, newBoard);\r\n      });\r\n  }\r\n\r\n  piecePlaced(player: player, newBoard: label[][]) {\r\n    const winnerCoordinates = checkWin(player.label, newBoard);\r\n\r\n    if (winnerCoordinates) {\r\n      this.onWin(player);\r\n      this.showWinner(winnerCoordinates, player);\r\n      // don't increase turn on winner\r\n      this.onBoardChange(newBoard, this.props.turn);\r\n    } else {\r\n      this.onBoardChange(newBoard, this.props.turn + 1);\r\n    }\r\n  }\r\n\r\n  clickToPlacePiece = (event: React.MouseEvent) => {\r\n    if (this.props.winner) {\r\n      return; // can't place pieces after win\r\n    }\r\n    const column = this.getColumn(event);\r\n    if (column >= gameWidth) {\r\n      return; // avoid rendering outside of the board\r\n    }\r\n\r\n    const player =\r\n      this.props.turn % 2 === 1 ? this.props.player1 : this.props.player2;\r\n\r\n    if (player.computer) return; // only humans click to place\r\n\r\n    this.placePiece(column, player);\r\n  };\r\n\r\n  showWinner(\r\n    coordinates: { x1: number; y1: number; x2: number; y2: number },\r\n    player: player\r\n  ) {\r\n    // hide overlay piece when the game is over\r\n    d3.select(\"#inputOverlay\").attr(\"fill\", backgroundColor);\r\n\r\n    d3.select(\"#Board\")\r\n      .append(\"line\")\r\n      .attr(\"id\", \"winLineOuter\")\r\n      .attr(\"stroke-width\", \"8\")\r\n      .attr(\"stroke-linecap\", \"round\")\r\n      .attr(\"stroke\", \"black\")\r\n      .attr(\"x1\", this.getPieceXCoordinates(coordinates.x1))\r\n      .attr(\"y1\", this.getPieceYCoordinates(coordinates.y1))\r\n      .attr(\"x2\", this.getPieceXCoordinates(coordinates.x1))\r\n      .attr(\"y2\", this.getPieceYCoordinates(coordinates.y1));\r\n\r\n    d3.select(\"#Board\")\r\n      .append(\"line\")\r\n      .attr(\"id\", \"winLineInner\")\r\n      .attr(\"stroke-width\", \"5\")\r\n      .attr(\"stroke-linecap\", \"round\")\r\n      .attr(\"stroke\", \"white\")\r\n      .attr(\"x1\", this.getPieceXCoordinates(coordinates.x1))\r\n      .attr(\"y1\", this.getPieceYCoordinates(coordinates.y1))\r\n      .attr(\"x2\", this.getPieceXCoordinates(coordinates.x1))\r\n      .attr(\"y2\", this.getPieceYCoordinates(coordinates.y1));\r\n\r\n    d3.select(\"#winLineOuter\")\r\n      .transition()\r\n      .ease(d3.easeExp)\r\n      .duration(200 * winSequence)\r\n      .attr(\"x2\", this.getPieceXCoordinates(coordinates.x2))\r\n      .attr(\"y2\", this.getPieceYCoordinates(coordinates.y2));\r\n\r\n    d3.select(\"#winLineInner\")\r\n      .transition()\r\n      .ease(d3.easeExp)\r\n      .duration(200 * winSequence)\r\n      .attr(\"x2\", this.getPieceXCoordinates(coordinates.x2))\r\n      .attr(\"y2\", this.getPieceYCoordinates(coordinates.y2));\r\n  }\r\n\r\n  getPieceXCoordinates(arrayCoordinate: number) {\r\n    return arrayCoordinate * sectionSize + sectionSize / 2 + margin;\r\n  }\r\n  getPieceYCoordinates(arrayCoordinate: number) {\r\n    return (\r\n      arrayCoordinate * sectionSize + sectionSize + sectionSize / 2 + margin\r\n    );\r\n  }\r\n\r\n  getColumn = (event: React.MouseEvent) => {\r\n    const boardPosition = document!\r\n      .getElementById(\"Board\")!\r\n      .getBoundingClientRect();\r\n\r\n    const position: { x: number; y: number } = {\r\n      x: event.clientX - boardPosition.left,\r\n      y: event.clientY - boardPosition.top\r\n    };\r\n\r\n    return (\r\n      (position.x - margin - ((position.x - margin) % sectionSize)) /\r\n      sectionSize\r\n    );\r\n  };\r\n\r\n  drawBoard() {\r\n    let currentRow: number = 0;\r\n    let currentColumn: number = 0;\r\n    const board = this.props.board;\r\n    board.forEach(row => {\r\n      row.forEach(section => {\r\n        d3.select(\"#Board\")\r\n          .append(\"circle\")\r\n          .attr(\"cx\", this.getPieceXCoordinates(currentColumn))\r\n          .attr(\"cy\", this.getPieceYCoordinates(currentRow))\r\n          .attr(\"r\", pieceSize / 2)\r\n          .attr(\"fill\", backgroundColor);\r\n\r\n        currentColumn++;\r\n      });\r\n      currentColumn = 0;\r\n      currentRow++;\r\n    });\r\n  }\r\n\r\n  resetBoard() {\r\n    d3.selectAll(\".\" + this.props.player1.label).remove();\r\n    d3.selectAll(\".\" + this.props.player2.label).remove();\r\n    d3.selectAll(\"#winLineOuter\").remove();\r\n    d3.selectAll(\"#winLineInner\").remove();\r\n  }\r\n\r\n  async componentDidUpdate() {\r\n    if (!this.props.started) {\r\n      this.resetBoard();\r\n      return;\r\n    }\r\n\r\n    d3.selectAll(\".\" + this.props.player1.label).attr(\r\n      \"fill\",\r\n      this.props.player1.color\r\n    );\r\n    d3.selectAll(\".\" + this.props.player2.label).attr(\r\n      \"fill\",\r\n      this.props.player2.color\r\n    );\r\n\r\n    if (this.props.winner) return;\r\n\r\n    const player =\r\n      this.props.turn % 2 === 1 ? this.props.player1 : this.props.player2;\r\n\r\n    d3.select(\"#inputOverlay\").attr(\r\n      \"fill\",\r\n      player.computer ? backgroundColor : player.color\r\n    );\r\n\r\n    if (player.computer) {\r\n      const column = this.computerMove(player);\r\n      this.placePiece(column, player);\r\n    }\r\n  }\r\n\r\n  computerMove(player: player) {\r\n    // get the computer's move\r\n    const column = getMove(\r\n      player,\r\n      player.label === label.player1 ? this.props.player2 : this.props.player1,\r\n      this.props.board\r\n    );\r\n    return column;\r\n  }\r\n\r\n  componentDidMount() {\r\n    d3.select(\"#Board\")\r\n      .append(\"rect\")\r\n      .attr(\"x\", 0)\r\n      .attr(\"y\", sectionSize * topInterfaceHeight)\r\n      .attr(\"width\", sectionSize * gameWidth + margin * 2)\r\n      .attr(\"height\", sectionSize * gameHeight + margin * 2)\r\n      .attr(\"fill\", \"yellow\");\r\n\r\n    // draw lines indicating input areas\r\n    for (let x = 0; x <= gameWidth; x++) {\r\n      d3.select(\"#Board\")\r\n        .append(\"line\")\r\n        .attr(\"x1\", x * sectionSize + margin)\r\n        .attr(\"x2\", x * sectionSize + margin)\r\n        .attr(\"y1\", sectionSpacing)\r\n        .attr(\"y2\", topInterfaceHeight * sectionSize - sectionSpacing)\r\n        .attr(\"stroke-width\", \"2\")\r\n        .attr(\"stroke-linecap\", \"round\")\r\n        .attr(\"stroke\", \"SteelBlue\");\r\n    }\r\n\r\n    this.drawBoard();\r\n\r\n    // add placeholder circle for input overlay\r\n    d3.select(\"#Board\")\r\n      .append(\"circle\")\r\n      .attr(\"id\", \"inputOverlay\")\r\n      .attr(\"cx\", sectionSize / 2 + margin)\r\n      .attr(\"cy\", sectionSize / 2)\r\n      .attr(\"r\", pieceSize / 2)\r\n      .attr(\"fill\", backgroundColor);\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div id=\"boardContainer\">\r\n        <svg\r\n          id=\"Board\"\r\n          onPointerMove={this.overlayPiece}\r\n          onMouseOver={this.overlayPiece}\r\n          onClick={this.clickToPlacePiece}\r\n          width={sectionSize * gameWidth + margin * 2}\r\n          height={sectionSize * (gameHeight + topInterfaceHeight) + margin * 2}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React, { Component } from \"react\";\r\nimport { props, player, label } from \"./interfaces\";\r\nimport { gameWidth, sectionSize } from \"./constants\";\r\nvar d3 = require(\"d3\");\r\nconst computer = require(\"./resources/computer.png\");\r\nconst human = require(\"./resources/human.png\");\r\nconst fontSize = 30;\r\nconst imageOffset = 110;\r\n\r\nexport default class Heading extends Component<props> {\r\n  constructor(props: props) {\r\n    super(props);\r\n  }\r\n\r\n  getImageAndPlayer() {\r\n    let playerNum = this.props.turn % 2;\r\n    let currentPlayer: player;\r\n    switch (playerNum) {\r\n      case 1:\r\n        currentPlayer = this.props.player1;\r\n        break;\r\n      default:\r\n        currentPlayer = this.props.player2;\r\n        playerNum = 2; // display 2 instead of 0\r\n    }\r\n\r\n    const image = currentPlayer.computer ? computer : human;\r\n\r\n    return { currentPlayer: currentPlayer, playerNum: playerNum, image: image };\r\n  }\r\n\r\n  componentDidUpdate() {\r\n    const turnData = this.getImageAndPlayer();\r\n    if (this.props.winner) {\r\n      const image = turnData.image;\r\n\r\n      d3.select(\"#headingText\")\r\n        .attr(\"fill\", turnData.currentPlayer.color)\r\n        .text(this.props.winner.label + \" Wins!\");\r\n\r\n      d3.select(\"#leftImage\").attr(\"xlink:href\", image);\r\n      d3.select(\"#rightImage\").attr(\"xlink:href\", image);\r\n    } else {\r\n      d3.select(\"#headingText\")\r\n        .attr(\"fill\", turnData.currentPlayer.color)\r\n        .text(\"Player \" + turnData.playerNum + \"'s turn\");\r\n\r\n      d3.select(\"#leftImage\").attr(\"xlink:href\", turnData.image);\r\n      d3.select(\"#rightImage\").attr(\"xlink:href\", turnData.image);\r\n    }\r\n  }\r\n\r\n  componentDidMount() {\r\n    const turnData = this.getImageAndPlayer();\r\n\r\n    d3.select(\"#Heading\")\r\n      .append(\"text\")\r\n      .attr(\"id\", \"headingText\")\r\n      .attr(\"x\", (sectionSize * gameWidth) / 2)\r\n      .attr(\"y\", sectionSize / 2)\r\n      .attr(\"font-family\", \"sans-serif\")\r\n      .attr(\"font-size\", \"30px\")\r\n      .attr(\"text-anchor\", \"middle\")\r\n      .attr(\"alignment-baseline\", \"middle\")\r\n      .attr(\"fill\", turnData.currentPlayer.color)\r\n      .text(\"Player \" + turnData.playerNum + \"'s turn\");\r\n\r\n    d3.select(\"#Heading\")\r\n      .append(\"svg:image\")\r\n      .attr(\"id\", \"leftImage\")\r\n      .attr(\"xlink:href\", turnData.image)\r\n      .attr(\"x\", imageOffset)\r\n      .attr(\"y\", sectionSize / 2 - fontSize / 2)\r\n      .attr(\"width\", fontSize)\r\n      .attr(\"height\", fontSize);\r\n\r\n    d3.select(\"#Heading\")\r\n      .append(\"svg:image\")\r\n      .attr(\"id\", \"rightImage\")\r\n      .attr(\"xlink:href\", turnData.image)\r\n      .attr(\"x\", sectionSize * gameWidth - fontSize - imageOffset)\r\n      .attr(\"y\", sectionSize / 2 - fontSize / 2)\r\n      .attr(\"width\", fontSize)\r\n      .attr(\"height\", fontSize);\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div id=\"headingContainer\">\r\n        <svg\r\n          id=\"Heading\"\r\n          width={sectionSize * gameWidth}\r\n          height={sectionSize}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React, { Component, FormEvent } from \"react\";\r\nimport Dropdown from \"react-dropdown\";\r\nimport \"react-dropdown/style.css\";\r\nimport { colorChoices } from \"./constants\";\r\nimport { individualControlProps, player, label } from \"./interfaces\";\r\n\r\nexport default class ColorChoices extends Component<individualControlProps> {\r\n  constructor(props: individualControlProps) {\r\n    super(props);\r\n    this.onPlayerChange = this.onPlayerChange.bind(this);\r\n    this.manageColors({\r\n      value: this.props.player.color\r\n    });\r\n  }\r\n\r\n  onPlayerChange(player1: player, player2: player) {\r\n    this.props.onPlayerChange(player1, player2);\r\n  }\r\n\r\n  manageColors(event: any) {\r\n    const myColor = event.value;\r\n    let opponent =\r\n      this.props.player === this.props.player1\r\n        ? this.props.player2\r\n        : this.props.player1;\r\n    const opponentColor = opponent.color;\r\n\r\n    const myColorOptions = colorChoices.filter(color => color != opponentColor);\r\n    const opponentColorOptions = colorChoices.filter(color => color != myColor);\r\n\r\n    opponent = {\r\n      ...opponent,\r\n      color: opponentColor,\r\n      colorOptions: opponentColorOptions\r\n    };\r\n\r\n    let me = {\r\n      ...this.props.player,\r\n      color: myColor,\r\n      colorOptions: myColorOptions\r\n    };\r\n\r\n    me.label == label.player1\r\n      ? this.onPlayerChange(me, opponent)\r\n      : this.onPlayerChange(opponent, me);\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <Dropdown\r\n        options={this.props.player.colorOptions}\r\n        onChange={e => this.manageColors(e)}\r\n        value={this.props.player.color}\r\n        placeholder=\"Choose a color\"\r\n      />\r\n    );\r\n  }\r\n}\r\n","import React, { Component, FormEvent } from \"react\";\r\nimport { individualControlProps, player, label } from \"./interfaces\";\r\nimport Dropdown from \"react-dropdown\";\r\nimport {\r\n  depthOptions,\r\n  defaultDepth,\r\n  evalFunctionOptions,\r\n  defaultEval,\r\n  evalFunctionDict\r\n} from \"./constants\";\r\n\r\nexport default class ComputerOptions extends Component<individualControlProps> {\r\n  constructor(props: individualControlProps) {\r\n    super(props);\r\n    this.onPlayerChange = this.onPlayerChange.bind(this);\r\n  }\r\n\r\n  onPlayerChange(player1: player, player2: player) {\r\n    this.props.onPlayerChange(player1, player2);\r\n  }\r\n\r\n  onDepthChange(event: any) {\r\n    const depth = +event.value;\r\n    const player = this.props.player;\r\n    player.searchOptions!.depth = depth;\r\n    player.label == label.player1\r\n      ? this.onPlayerChange(player, this.props.player2)\r\n      : this.onPlayerChange(this.props.player1, player);\r\n  }\r\n\r\n  onEvalChange(event: any) {\r\n    const evalFunction = event.value as string;\r\n    const player = this.props.player;\r\n    player.searchOptions!.evaluationFunction = evalFunctionDict[evalFunction];\r\n    player.label == label.player1\r\n      ? this.onPlayerChange(player, this.props.player2)\r\n      : this.onPlayerChange(this.props.player1, player);\r\n  }\r\n\r\n  render() {\r\n    if (this.props.player.computer) {\r\n      return (\r\n        <div className=\"computerOptions\">\r\n          <div className=\"option\">\r\n            Search depth\r\n            <Dropdown\r\n              options={depthOptions}\r\n              onChange={e => this.onDepthChange(e)}\r\n              value={this.props.player.searchOptions!.depth.toString()}\r\n              placeholder=\"Search depth\"\r\n            />\r\n          </div>\r\n          <div className=\"option\">\r\n            Evaluation Function\r\n            <Dropdown\r\n              options={evalFunctionOptions}\r\n              onChange={e => this.onEvalChange(e)}\r\n              value={defaultEval}\r\n              placeholder=\"Evaluation Function\"\r\n            />\r\n          </div>\r\n        </div>\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n}\r\n","import React, { Component, FormEvent } from \"react\";\r\nimport {\r\n  ToggleButton,\r\n  ToggleButtonGroup,\r\n  ButtonToolbar,\r\n  DropdownButton,\r\n  Button\r\n} from \"react-bootstrap\";\r\nimport Dropdown from \"react-dropdown\";\r\nimport \"react-dropdown/style.css\";\r\nimport { controlProps, props, player, label } from \"./interfaces\";\r\nimport {\r\n  colorChoices,\r\n  defaultDepth,\r\n  evalFunctionDict,\r\n  defaultEval\r\n} from \"./constants\";\r\nimport ColorChoices from \"./colorChoices\";\r\nimport ComputerOptions from \"./computerOptions\";\r\n\r\nconst controls1 = \"p1Controls\";\r\nconst controls2 = \"p2Controls\";\r\nconst type = \"t\";\r\nconst color = \"c\";\r\nconst search = \"s\";\r\n\r\nexport default class Controls extends Component<controlProps> {\r\n  constructor(props: controlProps) {\r\n    super(props);\r\n    this.onPlayerChange = this.onPlayerChange.bind(this);\r\n    this.onGameStart = this.onGameStart.bind(this);\r\n    this.onGameReset = this.onGameReset.bind(this);\r\n  }\r\n\r\n  onPlayerChange(player1: player, player2: player) {\r\n    this.props.onPlayerChange(player1, player2);\r\n  }\r\n\r\n  onGameStart() {\r\n    this.props.onGameStart();\r\n  }\r\n\r\n  onGameReset() {\r\n    this.props.onGameReset();\r\n  }\r\n\r\n  onPlayerTypeChange(event: any, player: player) {\r\n    const target = event.target;\r\n    const control = target.name;\r\n    player.computer = target.value === \"computer\";\r\n    if (player.computer) {\r\n      player.searchOptions = {\r\n        depth: +defaultDepth,\r\n        evaluationFunction: evalFunctionDict[defaultEval]\r\n      };\r\n    } else {\r\n      player.searchOptions = undefined;\r\n    }\r\n    player.label === label.player1\r\n      ? this.onPlayerChange(player, this.props.player2)\r\n      : this.onPlayerChange(this.props.player1, player);\r\n  }\r\n\r\n  playerControls(player: player) {\r\n    return (\r\n      <div id={player.label}>\r\n        {player.label + \":\"}\r\n        <form>\r\n          <ColorChoices {...this.props} player={player} />\r\n          <ToggleButtonGroup\r\n            onChange={() => this.onPlayerTypeChange(event, player)}\r\n            bsStyle=\"primary\"\r\n            type=\"radio\"\r\n            name={player.label + type}\r\n            defaultValue={player.computer ? \"computer\" : \"human\"}\r\n          >\r\n            <ToggleButton value={\"human\"} disabled={this.props.turn != 1}>\r\n              Human\r\n            </ToggleButton>\r\n            <ToggleButton value={\"computer\"} disabled={this.props.turn != 1}>\r\n              Computer\r\n            </ToggleButton>\r\n          </ToggleButtonGroup>\r\n          <ComputerOptions {...this.props} player={player} />\r\n        </form>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  gameControls(player1: player) {\r\n    if (player1.computer) {\r\n      return (\r\n        <div id=\"gameControls\">\r\n          <Button\r\n            disabled={this.props.turn != 1}\r\n            onClick={() => this.onGameStart()}\r\n          >\r\n            Start Game\r\n          </Button>\r\n          <Button\r\n            disabled={this.props.turn == 1}\r\n            onClick={() => this.onGameReset()}\r\n          >\r\n            Reset Game\r\n          </Button>\r\n        </div>\r\n      );\r\n    }\r\n    return (\r\n      <div id=\"gameControls\">\r\n        <Button\r\n          disabled={this.props.turn == 1}\r\n          onClick={() => this.onGameReset()}\r\n        >\r\n          Reset Game\r\n        </Button>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div id=\"controlContainer\">\r\n        {this.gameControls(this.props.player1)}\r\n        {this.playerControls(this.props.player1)}\r\n        {this.playerControls(this.props.player2)}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import { label, player, props } from \"./interfaces\";\r\nimport { colorChoices, gameHeight, gameWidth } from \"./constants\";\r\n\r\nexport function generateBoard() {\r\n  let board: label[][] = [];\r\n  for (let r: number = 0; r < gameHeight; r++) {\r\n    board[r] = [];\r\n    for (let c: number = 0; c < gameWidth; c++) {\r\n      board[r][c] = label.nobody;\r\n    }\r\n  }\r\n  return board;\r\n}\r\n\r\nexport const defaultProps: props = {\r\n  board: generateBoard(),\r\n  player1: {\r\n    computer: false,\r\n    label: label.player1,\r\n    color: \"red\",\r\n    colorOptions: colorChoices\r\n  },\r\n  player2: {\r\n    computer: false,\r\n    label: label.player2,\r\n    color: \"black\",\r\n    colorOptions: colorChoices\r\n  },\r\n  turn: 1,\r\n  started: false,\r\n  winner: false\r\n};\r\n","import React, { Component } from \"react\";\nimport Board from \"./board\";\nimport Heading from \"./heading\";\nimport \"./index.css\";\nimport { props, player, label } from \"./interfaces\";\nimport { render } from \"react-dom\";\nimport Controls from \"./controls\";\nimport { generateBoard } from \"./defaultProps\";\n\nclass App extends Component<props> {\n  state: props;\n\n  constructor(props: props) {\n    super(props);\n    this.state = { ...props };\n    this.onPlayerChange = this.onPlayerChange.bind(this);\n    this.onBoardChange = this.onBoardChange.bind(this);\n    this.onWin = this.onWin.bind(this);\n    this.onGameStart = this.onGameStart.bind(this);\n    this.onGameReset = this.onGameReset.bind(this);\n  }\n\n  onPlayerChange(player1: player, player2: player) {\n    this.setState({ player1: player1, player2: player2 });\n  }\n\n  onBoardChange(board: label[][], turn: number) {\n    this.setState({ board: board, turn: turn, started: true });\n  }\n\n  onWin(winner: player) {\n    this.setState({ winner: winner });\n  }\n\n  onGameStart() {\n    this.setState({ started: true });\n  }\n\n  onGameReset() {\n    this.setState({\n      board: generateBoard(),\n      turn: this.props.turn,\n      started: this.props.started,\n      winner: false\n    });\n  }\n\n  render() {\n    return (\n      <div id=\"App\">\n        <Heading {...this.state} />\n        <Board\n          {...this.state}\n          onBoardChange={this.onBoardChange}\n          onWin={this.onWin}\n        />\n        <Controls\n          {...this.state}\n          onPlayerChange={this.onPlayerChange}\n          onGameStart={this.onGameStart}\n          onGameReset={this.onGameReset}\n        />\n        <div id=\"Vizualization\" />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { defaultProps } from \"./defaultProps\";\n\nReactDOM.render(<App {...defaultProps} />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/computer.724e3bc3.png\";","module.exports = __webpack_public_path__ + \"static/media/human.e23fb818.png\";"],"sourceRoot":""}