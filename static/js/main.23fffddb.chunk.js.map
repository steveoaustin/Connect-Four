{"version":3,"sources":["resources/computer.png","resources/human.png","interfaces.ts","constants.ts","board.tsx","heading.tsx","App.tsx","serviceWorker.ts","defaultProps.ts","index.tsx"],"names":["module","exports","__webpack_require__","p","label","gameWidth","gameHeight","sectionSize","pieceSize","margin","d3","require","Board","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","overlayPiece","event","column","getColumn","select","attr","turn","transition","duration","ease","easeElastic","placePiece","row","y","board","nobody","append","newBoard","player1","player2","easeBounce","setState","boardPosition","document","getElementById","getBoundingClientRect","position","clientX","left","clientY","top","objectSpread","currentRow","currentColumn","forEach","section","color","x","drawBoard","react_default","a","createElement","id","onPointerMove","onMouseOver","onClick","width","height","Component","computer","human","Heading","currentPlayer","image","playerNum","text","fontSize","App","heading_Heading","board_Board","Boolean","window","location","hostname","match","defaultProps","ReactDOM","render","src_App","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.23fffddb.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/computer.724e3bc3.png\";","module.exports = __webpack_public_path__ + \"static/media/human.e23fb818.png\";","export interface player {\r\n  computer: boolean;\r\n  color: string;\r\n  searchOptions?: searchOptions;\r\n}\r\n\r\nexport interface searchOptions {\r\n  depth: number;\r\n  evaluationFunction: (board: label[][]) => number;\r\n}\r\n\r\nexport enum label {\r\n  nobody = 0,\r\n  player1 = 1,\r\n  player2 = 2\r\n}\r\n\r\nexport interface props {\r\n  board: label[][];\r\n  player1: player;\r\n  player2: player;\r\n  turn: number;\r\n}\r\n","import { searchOptions } from \"./interfaces\";\r\nimport {\r\n  simpleEvaluationFunction,\r\n  complexEvaluationFunction\r\n} from \"./intelligence\";\r\n\r\nexport const gameWidth = 7;\r\nexport const gameHeight = 6;\r\nexport const topInterfaceHeight = 1;\r\nexport const sectionSize = 70;\r\nexport const sectionSpacing = 7;\r\nexport const pieceSize = sectionSize - sectionSpacing;\r\nexport const margin = 5;\r\n\r\nexport const easy: searchOptions = {\r\n  depth: 1,\r\n  evaluationFunction: simpleEvaluationFunction\r\n};\r\nexport const medium: searchOptions = {\r\n  depth: 3,\r\n  evaluationFunction: simpleEvaluationFunction\r\n};\r\nexport const hard: searchOptions = {\r\n  depth: 5,\r\n  evaluationFunction: complexEvaluationFunction\r\n};\r\n","import React, { Component } from \"react\";\r\nimport { props, label } from \"./interfaces\";\r\nimport {\r\n  gameWidth,\r\n  gameHeight,\r\n  topInterfaceHeight,\r\n  pieceSize,\r\n  sectionSize,\r\n  sectionSpacing,\r\n  margin\r\n} from \"./constants\";\r\nconst d3 = require(\"d3\");\r\n\r\nexport default class Board extends Component<props> {\r\n  state: props;\r\n  constructor(props: props) {\r\n    super(props);\r\n    this.state = { ...props };\r\n  }\r\n\r\n  overlayPiece = (event: React.MouseEvent) => {\r\n    const column = this.getColumn(event);\r\n    if (column >= gameWidth) {\r\n      return; // avoid rendering outside of the board\r\n    }\r\n\r\n    d3.select(\"#inputOverlay\")\r\n      .attr(\"fill\", this.state.turn % 2 === 1 ? \"red\" : \"black\")\r\n      .transition()\r\n      .duration(150)\r\n      .ease(d3.easeElastic)\r\n      .attr(\"cx\", column * sectionSize + sectionSize / 2 + margin)\r\n      .attr(\"cy\", sectionSize / 2)\r\n      .attr(\"r\", pieceSize / 2);\r\n  };\r\n\r\n  placePiece = (event: React.MouseEvent) => {\r\n    const column = this.getColumn(event);\r\n    if (column >= gameWidth) {\r\n      return; // avoid rendering outside of the board\r\n    }\r\n\r\n    let row = gameHeight - 1;\r\n    for (let y = 0; y < gameHeight; y++) {\r\n      if (this.state.board[y][column] != label.nobody) {\r\n        row--;\r\n      }\r\n    }\r\n\r\n    if (row < 0) {\r\n      return; // row is full\r\n    }\r\n\r\n    d3.select(\"#Board\")\r\n      .append(\"circle\")\r\n      .attr(\"id\", \"piece\" + this.state.turn)\r\n      .attr(\"fill\", this.state.turn % 2 === 1 ? \"red\" : \"black\")\r\n      .attr(\"cx\", column * sectionSize + sectionSize / 2 + margin)\r\n      .attr(\"cy\", sectionSize / 2)\r\n      .attr(\"r\", pieceSize / 2);\r\n\r\n    let newBoard = this.state.board;\r\n    newBoard[row][column] =\r\n      this.state.turn % 2 === 1 ? label.player1 : label.player2;\r\n\r\n    d3.select(\"#piece\" + this.state.turn)\r\n      .transition()\r\n      .duration(150 + 100 * row)\r\n      .ease(d3.easeBounce)\r\n      .attr(\"cx\", column * sectionSize + sectionSize / 2 + margin)\r\n      .attr(\"cy\", row * sectionSize + sectionSize / 2 + sectionSize + margin)\r\n      .attr(\"r\", pieceSize / 2);\r\n\r\n    // swap the color of input overlay to cause \"instant\" transition\r\n    d3.select(\"#inputOverlay\").attr(\r\n      \"fill\",\r\n      (this.state.turn + 1) % 2 === 1 ? \"red\" : \"black\"\r\n    );\r\n\r\n    this.setState((state: props) => {\r\n      return { board: newBoard, turn: state.turn + 1 };\r\n    });\r\n  };\r\n\r\n  getColumn = (event: React.MouseEvent) => {\r\n    const boardPosition = document!\r\n      .getElementById(\"Board\")!\r\n      .getBoundingClientRect();\r\n\r\n    const position: { x: number; y: number } = {\r\n      x: event.clientX - boardPosition.left,\r\n      y: event.clientY - boardPosition.top\r\n    };\r\n\r\n    return (\r\n      (position.x - margin - ((position.x - margin) % sectionSize)) /\r\n      sectionSize\r\n    );\r\n  };\r\n\r\n  drawBoard() {\r\n    let currentRow: number = 0;\r\n    let currentColumn: number = 0;\r\n    const board: label[][] = this.state.board as label[][];\r\n    board.forEach(row => {\r\n      row.forEach(section => {\r\n        let color = \"white\";\r\n        switch (section) {\r\n          case label.player1:\r\n            color = \"red\";\r\n            break;\r\n          case label.player2:\r\n            color = \"black\";\r\n        }\r\n\r\n        d3.select(\"#Board\")\r\n          .append(\"circle\")\r\n          .attr(\"cx\", currentColumn * sectionSize + sectionSize / 2 + margin)\r\n          .attr(\r\n            \"cy\",\r\n            currentRow * sectionSize + sectionSize / 2 + sectionSize + margin\r\n          )\r\n          .attr(\"r\", pieceSize / 2)\r\n          .attr(\"fill\", color);\r\n\r\n        currentColumn++;\r\n      });\r\n      currentColumn = 0;\r\n      currentRow++;\r\n    });\r\n  }\r\n\r\n  componentDidMount() {\r\n    d3.select(\"#Board\")\r\n      .append(\"rect\")\r\n      .attr(\"x\", 0)\r\n      .attr(\"y\", sectionSize * topInterfaceHeight)\r\n      .attr(\"width\", sectionSize * gameWidth + margin * 2)\r\n      .attr(\"height\", sectionSize * gameHeight + margin * 2)\r\n      .attr(\"fill\", \"yellow\");\r\n\r\n    // draw lines indicating input areas\r\n    for (let x = 0; x <= gameWidth; x++) {\r\n      d3.select(\"#Board\")\r\n        .append(\"line\")\r\n        .attr(\"x1\", x * sectionSize + margin)\r\n        .attr(\"x2\", x * sectionSize + margin)\r\n        .attr(\"y1\", sectionSpacing)\r\n        .attr(\"y2\", topInterfaceHeight * sectionSize - sectionSpacing)\r\n        .attr(\"stroke-width\", \"2\")\r\n        .attr(\"stroke-linecap\", \"round\")\r\n        .attr(\"stroke\", \"SteelBlue\");\r\n    }\r\n\r\n    this.drawBoard();\r\n\r\n    // add placeholder circle for input overlay\r\n    d3.select(\"#Board\")\r\n      .append(\"circle\")\r\n      .attr(\"id\", \"inputOverlay\")\r\n      .attr(\"cx\", sectionSize / 2 + margin)\r\n      .attr(\"cy\", sectionSize / 2)\r\n      .attr(\"r\", pieceSize / 2)\r\n      .attr(\"fill\", \"white\");\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div id=\"boardContainer\">\r\n        <svg\r\n          onPointerMove={this.overlayPiece}\r\n          onMouseOver={this.overlayPiece}\r\n          onClick={this.placePiece}\r\n          id=\"Board\"\r\n          width={sectionSize * gameWidth + margin * 2}\r\n          height={sectionSize * (gameHeight + topInterfaceHeight) + margin * 2}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React, { Component } from \"react\";\r\nimport { props, player } from \"./interfaces\";\r\nimport { gameWidth, sectionSize } from \"./constants\";\r\nvar d3 = require(\"d3\");\r\nconst computer = require(\"./resources/computer.png\");\r\nconst human = require(\"./resources/human.png\");\r\nconst fontSize = 30;\r\nconst imageOffset = 110;\r\n\r\nexport default class Heading extends Component<props> {\r\n  state: props;\r\n  constructor(props: props) {\r\n    super(props);\r\n    this.state = { ...props };\r\n  }\r\n\r\n  componentDidMount() {\r\n    let playerNum = this.state.turn % 2;\r\n    let currentPlayer: player;\r\n    switch (playerNum) {\r\n      case 1:\r\n        currentPlayer = this.state.player1;\r\n        break;\r\n      default:\r\n        currentPlayer = this.state.player2;\r\n        playerNum = 2; // display 2 instead of 0\r\n    }\r\n\r\n    let image;\r\n    if (currentPlayer.computer) {\r\n      image = computer;\r\n    } else {\r\n      image = human;\r\n    }\r\n\r\n    d3.select(\"#Heading\")\r\n      .append(\"text\")\r\n      .attr(\"id\", \"headingText\")\r\n      .attr(\"x\", (sectionSize * gameWidth) / 2)\r\n      .attr(\"y\", sectionSize / 2)\r\n      .attr(\"font-family\", \"sans-serif\")\r\n      .attr(\"font-size\", \"30px\")\r\n      .attr(\"text-anchor\", \"middle\")\r\n      .attr(\"alignment-baseline\", \"middle\")\r\n      .attr(\"fill\", currentPlayer.color)\r\n      .text(\"Player \" + playerNum + \"'s turn\");\r\n\r\n    d3.select(\"#Heading\")\r\n      .append(\"svg:image\")\r\n      .attr(\"xlink:href\", image)\r\n      .attr(\"x\", imageOffset)\r\n      .attr(\"y\", sectionSize / 2 - fontSize / 2)\r\n      .attr(\"width\", fontSize)\r\n      .attr(\"height\", fontSize);\r\n\r\n    d3.select(\"#Heading\")\r\n      .append(\"svg:image\")\r\n      .attr(\"xlink:href\", image)\r\n      .attr(\"x\", sectionSize * gameWidth - fontSize - imageOffset)\r\n      .attr(\"y\", sectionSize / 2 - fontSize / 2)\r\n      .attr(\"width\", fontSize)\r\n      .attr(\"height\", fontSize);\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div id=\"headingContainer\">\r\n        <svg\r\n          id=\"Heading\"\r\n          width={sectionSize * gameWidth}\r\n          height={sectionSize}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React, { Component } from \"react\";\nimport Board from \"./board\";\nimport Heading from \"./heading\";\nimport \"./index.css\";\nimport { props, player } from \"./interfaces\";\n\nclass App extends Component<props> {\n  state: props;\n\n  constructor(props: props) {\n    super(props);\n    this.state = { ...props };\n  }\n\n  render() {\n    return (\n      <div id=\"App\">\n        <Heading {...this.state} />\n        <Board {...this.state} />\n        <div id=\"Controls\" />\n        <div id=\"Vizualization\" />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { label, player, props } from \"./interfaces\";\r\n\r\nconst board: label[][] = [\r\n  [\r\n    label.nobody,\r\n    label.nobody,\r\n    label.nobody,\r\n    label.nobody,\r\n    label.nobody,\r\n    label.nobody,\r\n    label.nobody\r\n  ],\r\n  [\r\n    label.nobody,\r\n    label.nobody,\r\n    label.nobody,\r\n    label.nobody,\r\n    label.nobody,\r\n    label.nobody,\r\n    label.nobody\r\n  ],\r\n  [\r\n    label.nobody,\r\n    label.nobody,\r\n    label.nobody,\r\n    label.nobody,\r\n    label.nobody,\r\n    label.nobody,\r\n    label.nobody\r\n  ],\r\n  [\r\n    label.nobody,\r\n    label.nobody,\r\n    label.nobody,\r\n    label.nobody,\r\n    label.nobody,\r\n    label.nobody,\r\n    label.nobody\r\n  ],\r\n  [\r\n    label.nobody,\r\n    label.nobody,\r\n    label.nobody,\r\n    label.nobody,\r\n    label.nobody,\r\n    label.nobody,\r\n    label.nobody\r\n  ],\r\n  [\r\n    label.nobody,\r\n    label.nobody,\r\n    label.nobody,\r\n    label.nobody,\r\n    label.nobody,\r\n    label.nobody,\r\n    label.nobody\r\n  ]\r\n];\r\n\r\nexport const defaultProps: props = {\r\n  board: board,\r\n  player1: { computer: false, color: \"red\" },\r\n  player2: { computer: false, color: \"black\" },\r\n  turn: 1\r\n};\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { defaultProps } from \"./defaultProps\";\n\nReactDOM.render(<App {...defaultProps} />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}